@page "/codeforces"
@inject HttpClient Http

<PageTitle>Codeforces</PageTitle>

<div class="container">
    <h1>Codeforces Stats</h1>
    <h2>Random Contest from Codeforces:</h2>

    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading contest data...</p>
        </div>
    }
    else if (randomContest != null)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@randomContest.Name</h5>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Type:</strong> @randomContest.Type</p>
                        <p><strong>Phase:</strong> @randomContest.Phase</p>
                        <p><strong>Duration:</strong> @(randomContest.DurationSeconds / 3600) hours</p>
                    </div>
                    <div class="col-md-6">
                        @if (!string.IsNullOrEmpty(randomContest.PreparedBy))
                        {
                            <p><strong>Prepared by:</strong> @randomContest.PreparedBy</p>
                        }

                        @if (!string.IsNullOrEmpty(randomContest.Country) || !string.IsNullOrEmpty(randomContest.City))
                        {
                            <p>
                                <strong>Location:</strong>
                                @if (!string.IsNullOrEmpty(randomContest.Country))
                                {
                                    <text>@randomContest.Country</text>
                                }
                                @if (!string.IsNullOrEmpty(randomContest.Country) && !string.IsNullOrEmpty(randomContest.City))
                                {
                                    <text>, </text>
                                }
                                @if (!string.IsNullOrEmpty(randomContest.City))
                                {
                                    <text>@randomContest.City</text>
                                }
                            </p>
                        }

                        @if (!string.IsNullOrEmpty(randomContest.WebsiteUrl))
                        {
                            <p><strong>Website:</strong> <a href="@randomContest.WebsiteUrl" target="_blank" class="btn btn-sm btn-outline-primary">Visit Contest</a></p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <em>No contest available at the moment.</em>
        </div>
    }
</div>

@code {
    private Contest[]? contests;
    private Contest? randomContest;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<CodeforcesResponse>("https://codeforces.com/api/contest.list?gym=true");
            if (response != null && response.Status == "OK")
            {
                contests = response.Result;
            }
            else
            {
                randomContest = null;
            }

            Console.WriteLine($"Total contests fetched: {contests?.Length ?? 0}");
            if (contests != null)
            {
                var filteredContests = contests.Where(c =>
                    !string.IsNullOrWhiteSpace(c.Country) &&
                    c.Country.ToLower() != "russia"
                ).ToArray();
                Console.WriteLine($"Filtered contests count: {filteredContests.Length}");

                if (filteredContests.Any())
                {
                    randomContest = filteredContests[new Random().Next(filteredContests.Length)];
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading contests: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class CodeforcesResponse
    {
        public string? Status { get; set; }
        public Contest[]? Result { get; set; }
    }

    public class Contest
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Type { get; set; }
        public string? Phase { get; set; }
        public bool Frozen { get; set; }
        public int DurationSeconds { get; set; }
        public int? FreezeDurationSeconds { get; set; }
        public long? StartTimeSeconds { get; set; }
        public long? RelativeTimeSeconds { get; set; }
        public string? PreparedBy { get; set; }
        public string? WebsiteUrl { get; set; }
        public string? Description { get; set; }
        public int? Difficulty { get; set; }
        public string? Kind { get; set; }
        public string? IcpcRegion { get; set; }
        public string? Country { get; set; }
        public string? City { get; set; }
        public string? Season { get; set; }
    }
}
